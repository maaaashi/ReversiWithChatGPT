@startuml ClassDiagram

package Domains {
  class Game {
    -id: string
    -turns: Turn[]
    -startAt: Date
  }

  class Turn {
    -id: string
    -turnCount: number
    -move: Move
    -squares: Square[]
    -nextDisc: 'black' | 'white'
    -endAt: Date
  }

  class Move {
    -id: string
    -x: number
    -y: number
  }

  class Square {
    -id: string
    -x: number
    -y: number
    -disc: '' | 'black' | 'white'
  }

  Game --> Turn
  Turn --> Move
  Turn --> Square
}

package Usecases {
  class GameUsecase {
    gameUsecaseInputPort: GameUsecaseInputPort
    gameUsecaseOutputPort: GameUsecaseOutputPort
    startGame(): Game
    registerTurn(turn: Turn): void
  }

  interface GameUsecaseInputPort {
    startGame(): Game
  }

  interface GameUsecaseOutputPort {
    registerTurn(turn: Turn): void
  }

  GameUsecase --> Game
  GameUsecase --> GameUsecaseInputPort
  GameUsecase --> GameUsecaseOutputPort
}

package Gateway {
  class GameGateway {
    gameInputPort: GameInputPort
  }

  interface GameGatewayInputPort {
    registerTurn(turn: Turn): void
  }

  GameGateway --> GameGatewayInputPort
  GameGateway ..|> GameUsecaseInputPort
}

package Driver {
  class GameDriver {
    startGame(): Response
  }
  GameDriver ..|> GameGatewayInputPort
}

package Presenter {
  class GamePresenter {

  }

  GamePresenter ..|> GameUsecaseOutputPort
}

@enduml